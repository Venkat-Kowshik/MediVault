(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>l});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto&display=swap);"]),i.push([n.id,"body {\r\n    margin: 0px;\r\n    padding: 0px;\r\n    background-color: #1f252f;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    display: grid;\r\n    overflow-x: hidden;\r\n    grid-template-columns: 230px 1fr;\r\n    -webkit-user-drag: none;\r\n    user-select: none;\r\n    -moz-user-select: none;\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n}\r\n#acct {\r\n    display: block;\r\n    color: black;\r\n    width: 180px;\r\n    display: flex;\r\n    align-items: center;\r\n    border-radius: 10px;\r\n    font-family: Roboto;\r\n    margin-bottom: 10px;\r\n    font-size: 1.2em;\r\n}\r\n#acct-parent {\r\n    position: absolute;\r\n    display: block;\r\n    bottom: 90px;\r\n    color: white;\r\n    width: 180px;\r\n    align-items: center;\r\n    left: 20px;\r\n    font-family: Roboto;\r\n    margin-bottom: 10px;\r\n    font-size: 1.2em;\r\n}\r\n.task-form {\r\n    box-sizing: border-box;\r\n    background-color: #272d3b;\r\n    transform: scale(1);\r\n    z-index: 2;\r\n    color: white;\r\n    font-family: 'Helvetica';\r\n    position: fixed;\r\n    border-radius: 20px;\r\n    top: 50%;\r\n    left: 50%;\r\n    width: 300px;\r\n    height: 220px;\r\n    display: none;\r\n    padding: 10px;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-left: -150px;\r\n    margin-top: -200px;\r\n    animation: zoom-out 0.1s ease-in-out 1;\r\n    transition: all 0.2s;\r\n}\r\n.task-form.active {\r\n    display: flex;\r\n}\r\nh3 {\r\n    margin-bottom: 15px !important;\r\n}\r\n.water-form {\r\n    box-sizing: border-box;\r\n    background-color: #272d3b;\r\n    transform: scale(1);\r\n    z-index: 2;\r\n    color: white;\r\n    font-family: 'Helvetica';\r\n    position: fixed;\r\n    border-radius: 20px;\r\n    left: 50%;\r\n    width: 300px;\r\n    height: 520px;\r\n    display: none;\r\n    padding: 10px;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 75%;\r\n    top: 5%;\r\n    left: 50%;\r\n    margin-left: -37.5%;\r\n    animation: zoom-out 0.1s ease-in-out 1;\r\n    transition: width,height 0.2s;\r\n}\r\n.water-form.active {\r\n    display: flex;\r\n}\r\n.water-opt {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    background-color: blueviolet;\r\n    justify-content: space-between;\r\n    background-size: contain;\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n}\r\n.water-quant{\r\n    display: none;\r\n    width: 90px;\r\n}\r\n.water-opt.active {\r\n    background-color: #fb0016;\r\n}\r\n.water-opt.active .water-quant{\r\n    display: inline;\r\n}\r\n.water-options {\r\n    color: black;\r\n    overflow-x: hidden;\r\n    overflow-y: scroll;\r\n    background-color: white;\r\n    display: grid;\r\n    row-gap: 10px;\r\n    padding: 10px;\r\n    column-gap: 10px;\r\n    grid-template-columns: repeat(auto-fit,minmax(200px,1fr));\r\n    grid-auto-rows: 200px;\r\n    width: 90%;\r\n    height: 70%;\r\n}\r\n#gsignin {\r\n    position: absolute;\r\n    bottom: 20px;\r\n    background-color: #2020cb;\r\n    color: white;\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-radius: 10px;\r\n    left: 20px;\r\n    font-family: Roboto;\r\n    margin-bottom: 10px;\r\n    font-size: 1.2em;\r\n    cursor: pointer;\r\n    transition: all 0.3s;\r\n}\r\n#gsignin:hover{\r\n    box-shadow: 5px 5px 10px rgba(0,0,0,0.5);\r\n}\r\n.project-form {\r\n    background-color: #1f252f;\r\n    transform: scale(1);\r\n    z-index: 2;\r\n    color: white;\r\n    font-family: 'Helvetica';\r\n    position: fixed;\r\n    border-radius: 20px;\r\n    top: 50%;\r\n    left: 50%;\r\n    width: 300px;\r\n    height: 200px;\r\n    display: none;\r\n    padding: 10px;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-left: -150px;\r\n    margin-top: -175px;\r\n    animation: zoom-out 0.1s ease-in-out 1;\r\n    transition: all 0.2s;\r\n}\r\n.project-form.active {\r\n    display: flex;\r\n}\r\n@keyframes zoom-out {\r\n    0% {\r\n        opacity: 0;\r\n        transform: scale(1.5);\r\n    }\r\n    100% {\r\n        opacity: 100;\r\n        transform: scale(1);\r\n    }\r\n}\r\n.input-container {\r\n    width: 90%;\r\n    margin-bottom: 50px;\r\n    position: relative;\r\n    color: white;\r\n}\r\n.input-container label {\r\n    display: block;\r\n    position: absolute;\r\n    top: -5px;\r\n    left: 10px;\r\n    transition: all 0.3s;\r\n}\r\n.input-container label.valid {\r\n    top: -30px;\r\n    left: 0px;\r\n}\r\n.stask {\r\n    background-color: white;\r\n    color: black;\r\n    width: 150px;\r\n    font-size: 1.2em;\r\n    font-family: Helvetica;\r\n    transition: all 0.3s;\r\n}\r\n.stask:hover {\r\n    background-color: #79b3bb;\r\n    color: black;\r\n}\r\n.input-container input {\r\n    display: block;\r\n    color: white;\r\n    background-color: transparent;\r\n    border: none;\r\n    border-bottom: 2px solid white;\r\n    width: 100%;\r\n}\r\n.input-container input:focus {\r\n    outline: none;\r\n    border-bottom: 2px solid #fb0016;\r\n}\r\n.input-container input:focus ~ label {\r\n    top: -30px;\r\n    left: 0px;\r\n}\r\n\r\n::-webkit-calendar-picker-indicator {\r\n    background-color: #fb0016;\r\n    transform: scale(1.1);\r\n}\r\n.overlay {\r\n    background-color: rgba(0,0,0,0.5);\r\n    position: fixed;\r\n    display: none;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 1;\r\n}\r\n.overlay.active {\r\n    display: block;\r\n}\r\n.side-btn {\r\n    padding: 10px;\r\n    position: relative;\r\n    font-family: Helvetica;\r\n    margin-bottom: 10px;\r\n    font-size: 1.2em;\r\n    cursor: pointer;\r\n}\r\n.side-btn:hover {\r\n    background-color: lightgray;\r\n}\r\n.side-btn.active {\r\n    background-color: #79b3bb;    \r\n}\r\nhr {\r\n    width: 90%;\r\n    border-width: 0px;\r\n    height: 2px;\r\n    background-color: black;\r\n    border-radius: 1px;\r\n}\r\n#sidebar {\r\n    padding: 10px;\r\n    position: relative;\r\n    background-color: #a7d0cc;\r\n    color: black;\r\n    grid-column: 1/2;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n#intakeoption {\r\n    display: none;\r\n}\r\nh1 {\r\n    margin: 0px 0px 0px 0px !important;\r\n}\r\n.select-option {\r\n    background-color: white;\r\n    border-radius: 20px;\r\n    border: 2px solid gray;\r\n    padding: 8px;\r\n    font-family: 'Helvetica';\r\n}\r\n.select-option.active {\r\n    background-color: #87a7b2;\r\n    color: black;\r\n}\r\n#content {\r\n    overflow-x: hidden;\r\n    background-color: white;\r\n    position: relative;\r\n    display: grid;\r\n    padding: 28px 30px 10px 30px;\r\n    grid-row-gap: 15px;\r\n    grid-template-rows: 40px 32px 35px fit-content(0px) 1fr;\r\n}\r\n.pheading {\r\n    font-family: helvetica;\r\n    margin-bottom: 20px;\r\n    color: black;\r\n    \r\n}\r\n.chevron {\r\n    transition: 0.3s;\r\n}\r\n.chevron.active {\r\n    transform: rotate(180deg);\r\n}\r\n.fadeInUp {\r\n    opacity: 0;\r\n    animation-name: fadeInUp;\r\n    animation-duration: 0.3s;\r\n    animation-fill-mode: forwards;\r\n}\r\n#heading {\r\n    font-size: 2.7em;\r\n    font-family: helvetica;\r\n    margin-bottom: 20px;\r\n}\r\n.addTask {\r\n    width: max-content;\r\n    border-radius: 10px;\r\n    background-color: #87a7b2;\r\n    font-family: helvetica;\r\n    color: black;\r\n    border: none;\r\n}\r\n\r\n.task-row {\r\n    display: flex;\r\n    min-height: 40px;\r\n    font-family: helvetica;\r\n    border-radius: 25px;\r\n    align-items: center;\r\n    gap: 15px;\r\n}\r\n.details {\r\n    display: flex;\r\n    overflow: hidden;\r\n    font-family: Helvetica;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n    margin-top: 15px;\r\n}\r\n.task-gp {\r\n    background-color: #87a7b2;\r\n    border-radius: 25px;\r\n    color: black;\r\n    padding: 10px 20px;\r\n    overflow: hidden;\r\n    height: 40px;\r\n    transition: height 0.3s;\r\n}\r\n.task-gp.active {\r\n    height: 151px;\r\n}\r\n.task-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 10px;\r\n    padding: 20px;\r\n    background-color: transparent;\r\n    height: 100%;\r\n}\r\n\r\n@keyframes fadeInUp {\r\n    from {\r\n      transform: translate3d(-40px, 0, 0);\r\n    }\r\n    to {\r\n      transform: translate3d(0, 0, 0);\r\n      opacity: 1;\r\n    }\r\n  }\r\n.pUnderline {\r\n    width: 0px;\r\n    animation-name: lineDraw;\r\n    animation-duration: 0.3s;\r\n    position: absolute;\r\n    top: 63px;\r\n    left: 30px;\r\n    animation-fill-mode: forwards;\r\n    animation-delay: 0.2s;\r\n    align-self: flex-start;\r\n}\r\n#ham {\r\n    display: none;\r\n}\r\n\r\n@keyframes lineDraw {\r\n    100% {\r\n        width: 90%;\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 700px){\r\n    body {\r\n        display: block;\r\n        height: 100vh;\r\n    }\r\n    .line {\r\n        height: 3px;\r\n        width: 30px;\r\n        border-radius: 40px;\r\n        background-color: black;\r\n    }\r\n    #ham {\r\n        display: block;\r\n        position: absolute;\r\n        right: 30px;\r\n        top: 38px;\r\n        display: flex;\r\n        flex-direction: column;\r\n        row-gap: 5px;\r\n    }\r\n    #sidebar {\r\n        display: block;\r\n        position: absolute;\r\n        left: -250px;\r\n        height: 100vh;\r\n        z-index: 2;\r\n        transition: all 0.2s;\r\n    }\r\n    #sidebar.active {\r\n        left: 0px;\r\n    }\r\n    #content {\r\n        height: 100vh;\r\n    }\r\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AACA;IACI,WAAW;IACX,YAAY;IACZ,yBAAyB;IACzB,YAAY;IACZ,aAAa;IACb,aAAa;IACb,kBAAkB;IAClB,gCAAgC;IAChC,uBAAuB;IACvB,iBAAiB;IACjB,sBAAsB;IACtB,yBAAyB;IACzB,qBAAqB;AACzB;AACA;IACI,cAAc;IACd,YAAY;IACZ,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,mBAAmB;IACnB,mBAAmB;IACnB,mBAAmB;IACnB,gBAAgB;AACpB;AACA;IACI,kBAAkB;IAClB,cAAc;IACd,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,mBAAmB;IACnB,UAAU;IACV,mBAAmB;IACnB,mBAAmB;IACnB,gBAAgB;AACpB;AACA;IACI,sBAAsB;IACtB,yBAAyB;IACzB,mBAAmB;IACnB,UAAU;IACV,YAAY;IACZ,wBAAwB;IACxB,eAAe;IACf,mBAAmB;IACnB,QAAQ;IACR,SAAS;IACT,YAAY;IACZ,aAAa;IACb,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,mBAAmB;IACnB,kBAAkB;IAClB,sCAAsC;IACtC,oBAAoB;AACxB;AACA;IACI,aAAa;AACjB;AACA;IACI,8BAA8B;AAClC;AACA;IACI,sBAAsB;IACtB,yBAAyB;IACzB,mBAAmB;IACnB,UAAU;IACV,YAAY;IACZ,wBAAwB;IACxB,eAAe;IACf,mBAAmB;IACnB,SAAS;IACT,YAAY;IACZ,aAAa;IACb,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,UAAU;IACV,OAAO;IACP,SAAS;IACT,mBAAmB;IACnB,sCAAsC;IACtC,6BAA6B;AACjC;AACA;IACI,aAAa;AACjB;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,4BAA4B;IAC5B,8BAA8B;IAC9B,wBAAwB;IACxB,4BAA4B;IAC5B,2BAA2B;AAC/B;AACA;IACI,aAAa;IACb,WAAW;AACf;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,eAAe;AACnB;AACA;IACI,YAAY;IACZ,kBAAkB;IAClB,kBAAkB;IAClB,uBAAuB;IACvB,aAAa;IACb,aAAa;IACb,aAAa;IACb,gBAAgB;IAChB,yDAAyD;IACzD,qBAAqB;IACrB,UAAU;IACV,WAAW;AACf;AACA;IACI,kBAAkB;IAClB,YAAY;IACZ,yBAAyB;IACzB,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,aAAa;IACb,mBAAmB;IACnB,UAAU;IACV,mBAAmB;IACnB,mBAAmB;IACnB,gBAAgB;IAChB,eAAe;IACf,oBAAoB;AACxB;AACA;IACI,wCAAwC;AAC5C;AACA;IACI,yBAAyB;IACzB,mBAAmB;IACnB,UAAU;IACV,YAAY;IACZ,wBAAwB;IACxB,eAAe;IACf,mBAAmB;IACnB,QAAQ;IACR,SAAS;IACT,YAAY;IACZ,aAAa;IACb,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,mBAAmB;IACnB,kBAAkB;IAClB,sCAAsC;IACtC,oBAAoB;AACxB;AACA;IACI,aAAa;AACjB;AACA;IACI;QACI,UAAU;QACV,qBAAqB;IACzB;IACA;QACI,YAAY;QACZ,mBAAmB;IACvB;AACJ;AACA;IACI,UAAU;IACV,mBAAmB;IACnB,kBAAkB;IAClB,YAAY;AAChB;AACA;IACI,cAAc;IACd,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,oBAAoB;AACxB;AACA;IACI,UAAU;IACV,SAAS;AACb;AACA;IACI,uBAAuB;IACvB,YAAY;IACZ,YAAY;IACZ,gBAAgB;IAChB,sBAAsB;IACtB,oBAAoB;AACxB;AACA;IACI,yBAAyB;IACzB,YAAY;AAChB;AACA;IACI,cAAc;IACd,YAAY;IACZ,6BAA6B;IAC7B,YAAY;IACZ,8BAA8B;IAC9B,WAAW;AACf;AACA;IACI,aAAa;IACb,gCAAgC;AACpC;AACA;IACI,UAAU;IACV,SAAS;AACb;;AAEA;IACI,yBAAyB;IACzB,qBAAqB;AACzB;AACA;IACI,iCAAiC;IACjC,eAAe;IACf,aAAa;IACb,MAAM;IACN,SAAS;IACT,OAAO;IACP,QAAQ;IACR,UAAU;AACd;AACA;IACI,cAAc;AAClB;AACA;IACI,aAAa;IACb,kBAAkB;IAClB,sBAAsB;IACtB,mBAAmB;IACnB,gBAAgB;IAChB,eAAe;AACnB;AACA;IACI,2BAA2B;AAC/B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,UAAU;IACV,iBAAiB;IACjB,WAAW;IACX,uBAAuB;IACvB,kBAAkB;AACtB;AACA;IACI,aAAa;IACb,kBAAkB;IAClB,yBAAyB;IACzB,YAAY;IACZ,gBAAgB;IAChB,aAAa;IACb,sBAAsB;AAC1B;AACA;IACI,aAAa;AACjB;AACA;IACI,kCAAkC;AACtC;AACA;IACI,uBAAuB;IACvB,mBAAmB;IACnB,sBAAsB;IACtB,YAAY;IACZ,wBAAwB;AAC5B;AACA;IACI,yBAAyB;IACzB,YAAY;AAChB;AACA;IACI,kBAAkB;IAClB,uBAAuB;IACvB,kBAAkB;IAClB,aAAa;IACb,4BAA4B;IAC5B,kBAAkB;IAClB,uDAAuD;AAC3D;AACA;IACI,sBAAsB;IACtB,mBAAmB;IACnB,YAAY;;AAEhB;AACA;IACI,gBAAgB;AACpB;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,UAAU;IACV,wBAAwB;IACxB,wBAAwB;IACxB,6BAA6B;AACjC;AACA;IACI,gBAAgB;IAChB,sBAAsB;IACtB,mBAAmB;AACvB;AACA;IACI,kBAAkB;IAClB,mBAAmB;IACnB,yBAAyB;IACzB,sBAAsB;IACtB,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,gBAAgB;IAChB,sBAAsB;IACtB,mBAAmB;IACnB,mBAAmB;IACnB,SAAS;AACb;AACA;IACI,aAAa;IACb,gBAAgB;IAChB,sBAAsB;IACtB,sBAAsB;IACtB,QAAQ;IACR,gBAAgB;AACpB;AACA;IACI,yBAAyB;IACzB,mBAAmB;IACnB,YAAY;IACZ,kBAAkB;IAClB,gBAAgB;IAChB,YAAY;IACZ,uBAAuB;AAC3B;AACA;IACI,aAAa;AACjB;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,aAAa;IACb,6BAA6B;IAC7B,YAAY;AAChB;;AAEA;IACI;MACE,mCAAmC;IACrC;IACA;MACE,+BAA+B;MAC/B,UAAU;IACZ;EACF;AACF;IACI,UAAU;IACV,wBAAwB;IACxB,wBAAwB;IACxB,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,6BAA6B;IAC7B,qBAAqB;IACrB,sBAAsB;AAC1B;AACA;IACI,aAAa;AACjB;;AAEA;IACI;QACI,UAAU;IACd;AACJ;;AAEA;IACI;QACI,cAAc;QACd,aAAa;IACjB;IACA;QACI,WAAW;QACX,WAAW;QACX,mBAAmB;QACnB,uBAAuB;IAC3B;IACA;QACI,cAAc;QACd,kBAAkB;QAClB,WAAW;QACX,SAAS;QACT,aAAa;QACb,sBAAsB;QACtB,YAAY;IAChB;IACA;QACI,cAAc;QACd,kBAAkB;QAClB,YAAY;QACZ,aAAa;QACb,UAAU;QACV,oBAAoB;IACxB;IACA;QACI,SAAS;IACb;IACA;QACI,aAAa;IACjB;AACJ",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');\r\nbody {\r\n    margin: 0px;\r\n    padding: 0px;\r\n    background-color: #1f252f;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    display: grid;\r\n    overflow-x: hidden;\r\n    grid-template-columns: 230px 1fr;\r\n    -webkit-user-drag: none;\r\n    user-select: none;\r\n    -moz-user-select: none;\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n}\r\n#acct {\r\n    display: block;\r\n    color: black;\r\n    width: 180px;\r\n    display: flex;\r\n    align-items: center;\r\n    border-radius: 10px;\r\n    font-family: Roboto;\r\n    margin-bottom: 10px;\r\n    font-size: 1.2em;\r\n}\r\n#acct-parent {\r\n    position: absolute;\r\n    display: block;\r\n    bottom: 90px;\r\n    color: white;\r\n    width: 180px;\r\n    align-items: center;\r\n    left: 20px;\r\n    font-family: Roboto;\r\n    margin-bottom: 10px;\r\n    font-size: 1.2em;\r\n}\r\n.task-form {\r\n    box-sizing: border-box;\r\n    background-color: #272d3b;\r\n    transform: scale(1);\r\n    z-index: 2;\r\n    color: white;\r\n    font-family: 'Helvetica';\r\n    position: fixed;\r\n    border-radius: 20px;\r\n    top: 50%;\r\n    left: 50%;\r\n    width: 300px;\r\n    height: 220px;\r\n    display: none;\r\n    padding: 10px;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-left: -150px;\r\n    margin-top: -200px;\r\n    animation: zoom-out 0.1s ease-in-out 1;\r\n    transition: all 0.2s;\r\n}\r\n.task-form.active {\r\n    display: flex;\r\n}\r\nh3 {\r\n    margin-bottom: 15px !important;\r\n}\r\n.water-form {\r\n    box-sizing: border-box;\r\n    background-color: #272d3b;\r\n    transform: scale(1);\r\n    z-index: 2;\r\n    color: white;\r\n    font-family: 'Helvetica';\r\n    position: fixed;\r\n    border-radius: 20px;\r\n    left: 50%;\r\n    width: 300px;\r\n    height: 520px;\r\n    display: none;\r\n    padding: 10px;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 75%;\r\n    top: 5%;\r\n    left: 50%;\r\n    margin-left: -37.5%;\r\n    animation: zoom-out 0.1s ease-in-out 1;\r\n    transition: width,height 0.2s;\r\n}\r\n.water-form.active {\r\n    display: flex;\r\n}\r\n.water-opt {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    background-color: blueviolet;\r\n    justify-content: space-between;\r\n    background-size: contain;\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n}\r\n.water-quant{\r\n    display: none;\r\n    width: 90px;\r\n}\r\n.water-opt.active {\r\n    background-color: #fb0016;\r\n}\r\n.water-opt.active .water-quant{\r\n    display: inline;\r\n}\r\n.water-options {\r\n    color: black;\r\n    overflow-x: hidden;\r\n    overflow-y: scroll;\r\n    background-color: white;\r\n    display: grid;\r\n    row-gap: 10px;\r\n    padding: 10px;\r\n    column-gap: 10px;\r\n    grid-template-columns: repeat(auto-fit,minmax(200px,1fr));\r\n    grid-auto-rows: 200px;\r\n    width: 90%;\r\n    height: 70%;\r\n}\r\n#gsignin {\r\n    position: absolute;\r\n    bottom: 20px;\r\n    background-color: #2020cb;\r\n    color: white;\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-radius: 10px;\r\n    left: 20px;\r\n    font-family: Roboto;\r\n    margin-bottom: 10px;\r\n    font-size: 1.2em;\r\n    cursor: pointer;\r\n    transition: all 0.3s;\r\n}\r\n#gsignin:hover{\r\n    box-shadow: 5px 5px 10px rgba(0,0,0,0.5);\r\n}\r\n.project-form {\r\n    background-color: #1f252f;\r\n    transform: scale(1);\r\n    z-index: 2;\r\n    color: white;\r\n    font-family: 'Helvetica';\r\n    position: fixed;\r\n    border-radius: 20px;\r\n    top: 50%;\r\n    left: 50%;\r\n    width: 300px;\r\n    height: 200px;\r\n    display: none;\r\n    padding: 10px;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-left: -150px;\r\n    margin-top: -175px;\r\n    animation: zoom-out 0.1s ease-in-out 1;\r\n    transition: all 0.2s;\r\n}\r\n.project-form.active {\r\n    display: flex;\r\n}\r\n@keyframes zoom-out {\r\n    0% {\r\n        opacity: 0;\r\n        transform: scale(1.5);\r\n    }\r\n    100% {\r\n        opacity: 100;\r\n        transform: scale(1);\r\n    }\r\n}\r\n.input-container {\r\n    width: 90%;\r\n    margin-bottom: 50px;\r\n    position: relative;\r\n    color: white;\r\n}\r\n.input-container label {\r\n    display: block;\r\n    position: absolute;\r\n    top: -5px;\r\n    left: 10px;\r\n    transition: all 0.3s;\r\n}\r\n.input-container label.valid {\r\n    top: -30px;\r\n    left: 0px;\r\n}\r\n.stask {\r\n    background-color: white;\r\n    color: black;\r\n    width: 150px;\r\n    font-size: 1.2em;\r\n    font-family: Helvetica;\r\n    transition: all 0.3s;\r\n}\r\n.stask:hover {\r\n    background-color: #79b3bb;\r\n    color: black;\r\n}\r\n.input-container input {\r\n    display: block;\r\n    color: white;\r\n    background-color: transparent;\r\n    border: none;\r\n    border-bottom: 2px solid white;\r\n    width: 100%;\r\n}\r\n.input-container input:focus {\r\n    outline: none;\r\n    border-bottom: 2px solid #fb0016;\r\n}\r\n.input-container input:focus ~ label {\r\n    top: -30px;\r\n    left: 0px;\r\n}\r\n\r\n::-webkit-calendar-picker-indicator {\r\n    background-color: #fb0016;\r\n    transform: scale(1.1);\r\n}\r\n.overlay {\r\n    background-color: rgba(0,0,0,0.5);\r\n    position: fixed;\r\n    display: none;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 1;\r\n}\r\n.overlay.active {\r\n    display: block;\r\n}\r\n.side-btn {\r\n    padding: 10px;\r\n    position: relative;\r\n    font-family: Helvetica;\r\n    margin-bottom: 10px;\r\n    font-size: 1.2em;\r\n    cursor: pointer;\r\n}\r\n.side-btn:hover {\r\n    background-color: lightgray;\r\n}\r\n.side-btn.active {\r\n    background-color: #79b3bb;    \r\n}\r\nhr {\r\n    width: 90%;\r\n    border-width: 0px;\r\n    height: 2px;\r\n    background-color: black;\r\n    border-radius: 1px;\r\n}\r\n#sidebar {\r\n    padding: 10px;\r\n    position: relative;\r\n    background-color: #a7d0cc;\r\n    color: black;\r\n    grid-column: 1/2;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n#intakeoption {\r\n    display: none;\r\n}\r\nh1 {\r\n    margin: 0px 0px 0px 0px !important;\r\n}\r\n.select-option {\r\n    background-color: white;\r\n    border-radius: 20px;\r\n    border: 2px solid gray;\r\n    padding: 8px;\r\n    font-family: 'Helvetica';\r\n}\r\n.select-option.active {\r\n    background-color: #87a7b2;\r\n    color: black;\r\n}\r\n#content {\r\n    overflow-x: hidden;\r\n    background-color: white;\r\n    position: relative;\r\n    display: grid;\r\n    padding: 28px 30px 10px 30px;\r\n    grid-row-gap: 15px;\r\n    grid-template-rows: 40px 32px 35px fit-content(0px) 1fr;\r\n}\r\n.pheading {\r\n    font-family: helvetica;\r\n    margin-bottom: 20px;\r\n    color: black;\r\n    \r\n}\r\n.chevron {\r\n    transition: 0.3s;\r\n}\r\n.chevron.active {\r\n    transform: rotate(180deg);\r\n}\r\n.fadeInUp {\r\n    opacity: 0;\r\n    animation-name: fadeInUp;\r\n    animation-duration: 0.3s;\r\n    animation-fill-mode: forwards;\r\n}\r\n#heading {\r\n    font-size: 2.7em;\r\n    font-family: helvetica;\r\n    margin-bottom: 20px;\r\n}\r\n.addTask {\r\n    width: max-content;\r\n    border-radius: 10px;\r\n    background-color: #87a7b2;\r\n    font-family: helvetica;\r\n    color: black;\r\n    border: none;\r\n}\r\n\r\n.task-row {\r\n    display: flex;\r\n    min-height: 40px;\r\n    font-family: helvetica;\r\n    border-radius: 25px;\r\n    align-items: center;\r\n    gap: 15px;\r\n}\r\n.details {\r\n    display: flex;\r\n    overflow: hidden;\r\n    font-family: Helvetica;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n    margin-top: 15px;\r\n}\r\n.task-gp {\r\n    background-color: #87a7b2;\r\n    border-radius: 25px;\r\n    color: black;\r\n    padding: 10px 20px;\r\n    overflow: hidden;\r\n    height: 40px;\r\n    transition: height 0.3s;\r\n}\r\n.task-gp.active {\r\n    height: 151px;\r\n}\r\n.task-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 10px;\r\n    padding: 20px;\r\n    background-color: transparent;\r\n    height: 100%;\r\n}\r\n\r\n@keyframes fadeInUp {\r\n    from {\r\n      transform: translate3d(-40px, 0, 0);\r\n    }\r\n    to {\r\n      transform: translate3d(0, 0, 0);\r\n      opacity: 1;\r\n    }\r\n  }\r\n.pUnderline {\r\n    width: 0px;\r\n    animation-name: lineDraw;\r\n    animation-duration: 0.3s;\r\n    position: absolute;\r\n    top: 63px;\r\n    left: 30px;\r\n    animation-fill-mode: forwards;\r\n    animation-delay: 0.2s;\r\n    align-self: flex-start;\r\n}\r\n#ham {\r\n    display: none;\r\n}\r\n\r\n@keyframes lineDraw {\r\n    100% {\r\n        width: 90%;\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 700px){\r\n    body {\r\n        display: block;\r\n        height: 100vh;\r\n    }\r\n    .line {\r\n        height: 3px;\r\n        width: 30px;\r\n        border-radius: 40px;\r\n        background-color: black;\r\n    }\r\n    #ham {\r\n        display: block;\r\n        position: absolute;\r\n        right: 30px;\r\n        top: 38px;\r\n        display: flex;\r\n        flex-direction: column;\r\n        row-gap: 5px;\r\n    }\r\n    #sidebar {\r\n        display: block;\r\n        position: absolute;\r\n        left: -250px;\r\n        height: 100vh;\r\n        z-index: 2;\r\n        transition: all 0.2s;\r\n    }\r\n    #sidebar.active {\r\n        left: 0px;\r\n    }\r\n    #content {\r\n        height: 100vh;\r\n    }\r\n}"],sourceRoot:""}]);const l=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);r&&i[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},i=[],l=0;l<n.length;l++){var s=n[l],c=r.base?s[0]+r.base:s[0],d=o[c]||0,A="".concat(c," ").concat(d);o[c]=d+1;var u=t(A),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var m=a(p,r);r.byIndex=l,e.splice(l,0,{identifier:A,updater:m,references:1})}i.push(A)}return i}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var o=r(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var l=t(o[i]);e[l].references--}for(var s=r(n,a),c=0;c<o.length;c++){var d=t(o[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}o=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var a=e[r];if(void 0!==a)return a.exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),a=t.n(r),o=t(569),i=t.n(o),l=t(565),s=t.n(l),c=t(216),d=t.n(c),A=t(589),u=t.n(A),p=t(426),m={};function f(n){this.name=n,this.water=null,this.projtasks=[]}function h(n){this.name=n,this.status=!1}function g(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function C(n){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},C(n)}function b(n){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},b(n)}function v(n){g(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"===b(n)&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function y(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function B(n){g(1,arguments);var e=v(n),t=e.getUTCDay(),r=(t<1?7:0)+t-1;return e.setUTCDate(e.getUTCDate()-r),e.setUTCHours(0,0,0,0),e}function x(n){g(1,arguments);var e=v(n),t=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var a=B(r),o=new Date(0);o.setUTCFullYear(t,0,4),o.setUTCHours(0,0,0,0);var i=B(o);return e.getTime()>=a.getTime()?t+1:e.getTime()>=i.getTime()?t:t-1}m.styleTagTransform=u(),m.setAttributes=s(),m.insert=i().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=d(),e()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;var w={};function I(){return w}function k(n,e){var t,r,a,o,i,l,s,c;g(1,arguments);var d=I(),A=y(null!==(t=null!==(r=null!==(a=null!==(o=null==e?void 0:e.weekStartsOn)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==a?a:d.weekStartsOn)&&void 0!==r?r:null===(s=d.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==t?t:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=v(n),p=u.getUTCDay(),m=(p<A?7:0)+p-A;return u.setUTCDate(u.getUTCDate()-m),u.setUTCHours(0,0,0,0),u}function S(n,e){var t,r,a,o,i,l,s,c;g(1,arguments);var d=v(n),A=d.getUTCFullYear(),u=I(),p=y(null!==(t=null!==(r=null!==(a=null!==(o=null==e?void 0:e.firstWeekContainsDate)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==a?a:u.firstWeekContainsDate)&&void 0!==r?r:null===(s=u.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1);if(!(p>=1&&p<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=new Date(0);m.setUTCFullYear(A+1,0,p),m.setUTCHours(0,0,0,0);var f=k(m,e),h=new Date(0);h.setUTCFullYear(A,0,p),h.setUTCHours(0,0,0,0);var C=k(h,e);return d.getTime()>=f.getTime()?A+1:d.getTime()>=C.getTime()?A:A-1}function T(n,e){for(var t=n<0?"-":"",r=Math.abs(n).toString();r.length<e;)r="0"+r;return t+r}const E=function(n,e){var t=n.getUTCFullYear(),r=t>0?t:1-t;return T("yy"===e?r%100:r,e.length)},M=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):T(t+1,2)},L=function(n,e){return T(n.getUTCDate(),e.length)},U=function(n,e){return T(n.getUTCHours()%12||12,e.length)},Y=function(n,e){return T(n.getUTCHours(),e.length)},q=function(n,e){return T(n.getUTCMinutes(),e.length)},D=function(n,e){return T(n.getUTCSeconds(),e.length)},j=function(n,e){var t=e.length,r=n.getUTCMilliseconds();return T(Math.floor(r*Math.pow(10,t-3)),e.length)};var z={G:function(n,e,t){var r=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var r=n.getUTCFullYear(),a=r>0?r:1-r;return t.ordinalNumber(a,{unit:"year"})}return E(n,e)},Y:function(n,e,t,r){var a=S(n,r),o=a>0?a:1-a;return"YY"===e?T(o%100,2):"Yo"===e?t.ordinalNumber(o,{unit:"year"}):T(o,e.length)},R:function(n,e){return T(x(n),e.length)},u:function(n,e){return T(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return T(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return T(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,e,t){var r=n.getUTCMonth();switch(e){case"M":case"MM":return M(n,e);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(n,e,t){var r=n.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return T(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(n,e,t,r){var a=function(n,e){g(1,arguments);var t=v(n),r=k(t,e).getTime()-function(n,e){var t,r,a,o,i,l,s,c;g(1,arguments);var d=I(),A=y(null!==(t=null!==(r=null!==(a=null!==(o=null==e?void 0:e.firstWeekContainsDate)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==a?a:d.firstWeekContainsDate)&&void 0!==r?r:null===(s=d.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1),u=S(n,e),p=new Date(0);return p.setUTCFullYear(u,0,A),p.setUTCHours(0,0,0,0),k(p,e)}(t,e).getTime();return Math.round(r/6048e5)+1}(n,r);return"wo"===e?t.ordinalNumber(a,{unit:"week"}):T(a,e.length)},I:function(n,e,t){var r=function(n){g(1,arguments);var e=v(n),t=B(e).getTime()-function(n){g(1,arguments);var e=x(n),t=new Date(0);return t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0),B(t)}(e).getTime();return Math.round(t/6048e5)+1}(n);return"Io"===e?t.ordinalNumber(r,{unit:"week"}):T(r,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):L(n,e)},D:function(n,e,t){var r=function(n){g(1,arguments);var e=v(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=t-e.getTime();return Math.floor(r/864e5)+1}(n);return"Do"===e?t.ordinalNumber(r,{unit:"dayOfYear"}):T(r,e.length)},E:function(n,e,t){var r=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(n,e,t,r){var a=n.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(o);case"ee":return T(o,2);case"eo":return t.ordinalNumber(o,{unit:"day"});case"eee":return t.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(a,{width:"short",context:"formatting"});default:return t.day(a,{width:"wide",context:"formatting"})}},c:function(n,e,t,r){var a=n.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(o);case"cc":return T(o,e.length);case"co":return t.ordinalNumber(o,{unit:"day"});case"ccc":return t.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(a,{width:"narrow",context:"standalone"});case"cccccc":return t.day(a,{width:"short",context:"standalone"});default:return t.day(a,{width:"wide",context:"standalone"})}},i:function(n,e,t){var r=n.getUTCDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return T(a,e.length);case"io":return t.ordinalNumber(a,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(n,e,t){var r=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,e,t){var r,a=n.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,e,t){var r,a=n.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var r=n.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return U(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):Y(n,e)},K:function(n,e,t){var r=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(r,{unit:"hour"}):T(r,e.length)},k:function(n,e,t){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===e?t.ordinalNumber(r,{unit:"hour"}):T(r,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):q(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):D(n,e)},S:function(n,e){return j(n,e)},X:function(n,e,t,r){var a=(r._originalDate||n).getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return W(a);case"XXXX":case"XX":return N(a);default:return N(a,":")}},x:function(n,e,t,r){var a=(r._originalDate||n).getTimezoneOffset();switch(e){case"x":return W(a);case"xxxx":case"xx":return N(a);default:return N(a,":")}},O:function(n,e,t,r){var a=(r._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+P(a,":");default:return"GMT"+N(a,":")}},z:function(n,e,t,r){var a=(r._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+P(a,":");default:return"GMT"+N(a,":")}},t:function(n,e,t,r){var a=r._originalDate||n;return T(Math.floor(a.getTime()/1e3),e.length)},T:function(n,e,t,r){return T((r._originalDate||n).getTime(),e.length)}};function P(n,e){var t=n>0?"-":"+",r=Math.abs(n),a=Math.floor(r/60),o=r%60;if(0===o)return t+String(a);var i=e||"";return t+String(a)+i+T(o,2)}function W(n,e){return n%60==0?(n>0?"-":"+")+T(Math.abs(n)/60,2):N(n,e)}function N(n,e){var t=e||"",r=n>0?"-":"+",a=Math.abs(n);return r+T(Math.floor(a/60),2)+t+T(a%60,2)}const H=z;var O=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},F=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const Q={p:F,P:function(n,e){var t,r=n.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return O(n,e);switch(a){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",O(a,e)).replace("{{time}}",F(o,e))}};var Z=["D","DD"],R=["YY","YYYY"];function V(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var J={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function _(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth;return n.formats[t]||n.formats[n.defaultWidth]}}const X={date:_({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:_({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:_({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var G={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function $(n){return function(e,t){var r;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var a=n.defaultFormattingWidth||n.defaultWidth,o=null!=t&&t.width?String(t.width):a;r=n.formattingValues[o]||n.formattingValues[a]}else{var i=n.defaultWidth,l=null!=t&&t.width?String(t.width):n.defaultWidth;r=n.values[l]||n.values[i]}return r[n.argumentCallback?n.argumentCallback(e):e]}}const K={ordinalNumber:function(n,e){var t=Number(n),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:$({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:$({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:$({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:$({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:$({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function nn(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,a=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],o=e.match(a);if(!o)return null;var i,l=o[0],s=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],c=Array.isArray(s)?function(n,e){for(var t=0;t<n.length;t++)if(n[t].test(l))return t}(s):function(n,e){for(var t in n)if(n.hasOwnProperty(t)&&n[t].test(l))return t}(s);return i=n.valueCallback?n.valueCallback(c):c,{value:i=t.valueCallback?t.valueCallback(i):i,rest:e.slice(l.length)}}}var en,tn={ordinalNumber:(en={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(en.matchPattern);if(!t)return null;var r=t[0],a=n.match(en.parsePattern);if(!a)return null;var o=en.valueCallback?en.valueCallback(a[0]):a[0];return{value:o=e.valueCallback?e.valueCallback(o):o,rest:n.slice(r.length)}}),era:nn({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:nn({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:nn({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:nn({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:nn({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const rn={code:"en-US",formatDistance:function(n,e,t){var r,a=J[n];return r="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:X,formatRelative:function(n,e,t,r){return G[n]},localize:K,match:tn,options:{weekStartsOn:0,firstWeekContainsDate:1}};var an=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,on=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ln=/^'([^]*?)'?$/,sn=/''/g,cn=/[a-zA-Z]/;function dn(n,e,t){var r,a,o,i,l,s,c,d,A,u,p,m,f,h,b,B,x,w;g(2,arguments);var k=String(e),S=I(),T=null!==(r=null!==(a=null==t?void 0:t.locale)&&void 0!==a?a:S.locale)&&void 0!==r?r:rn,E=y(null!==(o=null!==(i=null!==(l=null!==(s=null==t?void 0:t.firstWeekContainsDate)&&void 0!==s?s:null==t||null===(c=t.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==l?l:S.firstWeekContainsDate)&&void 0!==i?i:null===(A=S.locale)||void 0===A||null===(u=A.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==o?o:1);if(!(E>=1&&E<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var M=y(null!==(p=null!==(m=null!==(f=null!==(h=null==t?void 0:t.weekStartsOn)&&void 0!==h?h:null==t||null===(b=t.locale)||void 0===b||null===(B=b.options)||void 0===B?void 0:B.weekStartsOn)&&void 0!==f?f:S.weekStartsOn)&&void 0!==m?m:null===(x=S.locale)||void 0===x||null===(w=x.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==p?p:0);if(!(M>=0&&M<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!T.localize)throw new RangeError("locale must contain localize property");if(!T.formatLong)throw new RangeError("locale must contain formatLong property");var L=v(n);if(!function(n){if(g(1,arguments),!function(n){return g(1,arguments),n instanceof Date||"object"===C(n)&&"[object Date]"===Object.prototype.toString.call(n)}(n)&&"number"!=typeof n)return!1;var e=v(n);return!isNaN(Number(e))}(L))throw new RangeError("Invalid time value");var U=function(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}(L),Y=function(n,e){return g(2,arguments),function(n,e){g(2,arguments);var t=v(n).getTime(),r=y(e);return new Date(t+r)}(n,-y(e))}(L,U),q={firstWeekContainsDate:E,weekStartsOn:M,locale:T,_originalDate:L};return k.match(on).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,Q[e])(n,T.formatLong):n})).join("").match(an).map((function(r){if("''"===r)return"'";var a,o,i=r[0];if("'"===i)return(o=(a=r).match(ln))?o[1].replace(sn,"'"):a;var l,s=H[i];if(s)return null!=t&&t.useAdditionalWeekYearTokens||(l=r,-1===R.indexOf(l))||V(r,e,String(n)),null!=t&&t.useAdditionalDayOfYearTokens||!function(n){return-1!==Z.indexOf(n)}(r)||V(r,e,String(n)),s(Y,r,T.localize,q);if(i.match(cn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return r})).join("")}function An(n,e){g(2,arguments);var t=v(n),r=v(e),a=t.getTime()-r.getTime();return a<0?-1:a>0?1:a}function un(n){return un="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},un(n)}let pn,mn=document.querySelectorAll(".side-btn"),fn=document.querySelector(".task-form"),hn=document.querySelector(".project-form"),gn=document.querySelector(".overlay"),Cn=document.querySelector("#content"),bn=0,vn=null;function yn(n,e,t){let r=document.createElement("div"),a=document.createElement("div");a.style.cssText="display: flex;",a.setAttribute("id",`task${e}`);let o=document.createElement("div");o.textContent=t.name,a.appendChild(o),o=document.createElement("input"),o.setAttribute("type","text"),o.style.cssText="margin-right: auto;display: none;",a.appendChild(o),a.children[0].addEventListener("click",(()=>{a.children[1].value=a.children[0].textContent,a.children[1].style.display="block",a.children[1].focus(),a.children[0].style.display="none",a.children[1].addEventListener("focusout",(()=>{let n=a.getAttribute("id").slice(4);In[pn].projtasks[n].name=a.children[1].value,a.children[1].style.display="none",a.children[0].style.display="block",a.children[0].textContent=a.children[1].value;let e=a.children[0].textContent;a.children[2].textContent="Calories"+Bn(a.children[2],e),localStorage.projectArray=JSON.stringify(In)}))})),o=document.createElement("div"),o.textContent="Calories "+Bn(o,t.name),o.style.cssText="flex: 1 1 0; text-align: right;",a.appendChild(o),o=document.createElement("div"),o.style.cssText="height: 25px;width: 25px;color: white;",o.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><title>delete</title><path fill="#FFFFFF" d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z" /></svg>',a.appendChild(o),o.addEventListener("click",(()=>{document.querySelector("#"+a.getAttribute("id")).parentElement.remove();let n=parseInt(a.getAttribute("id").slice(4));In[pn].projtasks.splice(n,1);let e=0;Array.from(document.querySelector(".task-container").children).forEach((n=>{n.children[0].setAttribute("id",`task${e}`),e++})),Ln(),localStorage.projectArray=JSON.stringify(In)})),o=document.createElement("div"),o.style.cssText="height: 25px;width: 25px;color: white;",o.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="#FFFFFF" d="M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z" /></svg>',a.appendChild(o),o.classList.add("chevron"),o.addEventListener("click",(()=>{o.parentElement.previousElementSibling.children[4].classList.toggle("active"),r.classList.toggle("active")})),a.classList.add("task-row"),r.appendChild(a),a=document.createElement("div"),a.classList.add("details"),o=document.createElement("div"),o.classList.add("protein"),o.textContent="Protein: 0",a.appendChild(o),o=document.createElement("div"),o.classList.add("fat"),o.textContent="Fat: 0",a.appendChild(o),o=document.createElement("div"),o.classList.add("cholestrol"),o.textContent="Cholestrol: 0",a.appendChild(o),o=document.createElement("div"),o.classList.add("carbohydrate"),o.textContent="Carbohydrates: 0",a.appendChild(o),r.appendChild(a),a=a.previousElementSibling,r.classList.add("task-gp"),r.classList.add("fadeInUp"),n.appendChild(r)}function Bn(n,e){let t=e;t=t.replace(/ /g,"%20"),fetch("https://trackapi.nutritionix.com/v2/natural/nutrients",{method:"POST",headers:{"Content-Type":"application/json","x-app-id":"b33d1a65","x-app-key":"628ea5276fba473ee04e6c0ff1ec4bfa"},body:JSON.stringify({query:t})}).then((n=>n.json())).then((e=>{console.log(e);let t=e,r=0,a=[0,0,0,0];t=t.foods,console.log("Hello"),console.log(t[0].nf_cholestrol),r+=t[0].nf_calories,a[0]+=t[0].nf_protein,a[1]+=t[0].nf_total_fat,a[2]+=t[0].nf_cholesterol,a[3]+=t[0].nf_total_carbohydrate,n.textContent="Calories: "+r,n.parentElement.nextElementSibling.children[0].textContent="Proteins: "+a[0]+" g",n.parentElement.nextElementSibling.children[1].textContent="Fat: "+a[1]+" g",n.parentElement.nextElementSibling.children[2].textContent="Cholestrol: "+a[2]+" mg",n.parentElement.nextElementSibling.children[3].textContent="Carbohydrates: "+a[3]+" g",Ln()})).catch((n=>{console.error("Error:",n)}))}window.sortTasks=function(){let n=document.querySelector(".task-container").children.length;for(let e=0;e<n-1;e++)for(let e=0;e<n-1;e++){let n=document.querySelector(".task-container").children[e],t=document.querySelector(".task-container").children[e+1],r=n.children[2].innerHTML.slice(5).split("-");r.reverse();let a=new Date(r.join()),o=t.children[2].innerHTML.slice(5).split("-");o.reverse(),1==An(a,new Date(o.join()))&&n.parentNode.insertBefore(t,n)}};let xn=document.querySelector("#acct");function wn(n){Cn.innerHTML="";let e=document.createElement("h1");e.textContent=n,e.classList.add("pheading"),e.classList.add("fadeInUp"),Cn.appendChild(e),e=document.createElement("hr"),e.classList.add("pUnderline"),Cn.appendChild(e)}xn.addEventListener("change",(()=>{vn=xn.value,document.querySelector(`.side-btn[data-index="${pn}"]`).click()})),window.tabselect=wn,mn.forEach((n=>{n.addEventListener("click",(()=>{n.classList.add("active")}))})),document.querySelectorAll(".input-container input").forEach((n=>{n.addEventListener("blur",(()=>{let e=n.nextElementSibling;""!=n.value?e.classList.add("valid"):e.classList.remove("valid")}))}));let In=[];function kn(){let n=dn(new Date(document.querySelector("#dname").value),"dd-MM-yy");document.querySelector("#dname").value="";let e=new f(n);In.push(e),gn.click(),Tn()}function Sn(){if(null!=localStorage.projectArray&&2!=localStorage.projectArray.length)return In=JSON.parse(localStorage.projectArray),Tn(),void(0!=pn&&document.querySelector("#projects").children[0].click());pn=-1,document.querySelector("#dname").value=dn(new Date,"yyyy-MM-dd"),kn(),document.querySelector("#dname").value=""}function Tn(){let n,e,t=0,r=document.querySelector("#projects");r.innerHTML="",In.forEach((a=>{let o=document.createElement("div");o.classList.add("side-btn"),o.setAttribute("data-index",t++),o.textContent=a.name,o.addEventListener("click",(()=>{n=a.name.split("-"),e=n[0],n[0]=n[1],n[1]=e,wn(dn(new Date(n.join("-")),"dd MMM yyyy"));let t=document.createElement("div");t.style.cssText="display: flex; gap: 15px;";let r=document.createElement("button");r.textContent="+ Add Item",r.classList.add("addTask"),r.classList.add("fadeInUp"),r.addEventListener("click",(()=>{Mn(o.getAttribute("data-index"))})),t.appendChild(r),r=document.createElement("button"),r.textContent="+ Add Water",r.classList.add("addTask"),r.classList.add("fadeInUp"),r.addEventListener("click",(()=>{Dn.classList.add("active"),gn.classList.toggle("active")})),t.appendChild(r),Cn.appendChild(t);let i=document.createElement("div");i.style.cssText="display: flex; justify-content: space-around;width: 100%;align-items: center;font-family: Helvetica;",i.classList.add("fadeInUp"),r=document.createElement("div"),r.textContent="Value: 0",r.setAttribute("id","intakevalue"),i.appendChild(r),r=document.createElement("div"),r.textContent="Calories Burnt: 0",r.setAttribute("id","calspent"),i.appendChild(r),r=document.createElement("div"),r.textContent="Calorie Goal: "+localStorage.calgoal,r.setAttribute("id","calgoal"),i.appendChild(r),Cn.appendChild(i),r=document.createElement("div"),r.setAttribute("id","selectmodes"),r.classList.add("fadeInUp"),r.style.cssText="display: flex;flex-wrap: wrap;row-gap: 10px; column-gap: 10px;";let l=document.createElement("div");l.classList.add("select-option"),l.textContent="Calorie Intake",r.appendChild(l),l=document.createElement("div"),l.classList.add("select-option"),l.textContent="Protein Intake",r.appendChild(l),l=document.createElement("div"),l.classList.add("select-option"),l.textContent="Fat Intake",r.appendChild(l),l=document.createElement("div"),l.classList.add("select-option"),l.textContent="Cholestrol Intake",r.appendChild(l),l=document.createElement("div"),l.classList.add("select-option"),l.textContent="Carbohydrate Intake",r.appendChild(l),l=document.createElement("div"),l.classList.add("select-option"),l.textContent="Water Intake",r.appendChild(l),Cn.appendChild(r);let s=0;document.querySelectorAll(".select-option").forEach((n=>{n.setAttribute("data-mode",s++),n.addEventListener("click",(()=>{bn=parseInt(n.getAttribute("data-mode")),En(bn),Ln()}))})),r=document.createElement("div"),r.classList.add("task-container"),r.classList.add("fadeInUp"),Cn.appendChild(r),Un(o.getAttribute("data-index")),o.classList.add("active"),pn=o.getAttribute("data-index"),Yn(o.getAttribute("data-index")),gn.click(),En(bn);let c=In[pn].name.split("-"),d=c[0];c[0]=c[1],c[1]=d;let A=new Date(c.join("-"));console.log(A),console.log(A.getTime());let u=function(n,e){if(g(2,arguments),!e||"object"!==un(e))return new Date(NaN);var t=e.years?y(e.years):0,r=e.months?y(e.months):0,a=e.weeks?y(e.weeks):0,o=e.days?y(e.days):0,i=e.hours?y(e.hours):0,l=e.minutes?y(e.minutes):0,s=e.seconds?y(e.seconds):0,c=v(n),d=r||t?function(n,e){g(2,arguments);var t=v(n),r=y(e);if(isNaN(r))return new Date(NaN);if(!r)return t;var a=t.getDate(),o=new Date(t.getTime());return o.setMonth(t.getMonth()+r+1,0),a>=o.getDate()?o:(t.setFullYear(o.getFullYear(),o.getMonth(),a),t)}(c,r+12*t):c,A=o||a?function(n,e){g(2,arguments);var t=v(n),r=y(e);return isNaN(r)?new Date(NaN):r?(t.setDate(t.getDate()+r),t):t}(d,o+7*a):d,u=1e3*(s+60*(l+60*i));return new Date(A.getTime()+u)}(A,{days:1});console.log(u),console.log(u.getTime()),null!=vn&&""!=vn&&function(n,e){var t=new XMLHttpRequest;if(null!=vn){t.onreadystatechange=function(){t.readyState==XMLHttpRequest.DONE&&(console.log(JSON.parse(t.responseText)),console.log(JSON.parse(t.responseText).bucket[0].dataset[0].point[0].value[0].fpVal),document.querySelector("#calspent").textContent="Calories Burnt: "+JSON.parse(t.responseText).bucket[0].dataset[0].point[0].value[0].fpVal.toFixed(0)+" cal")};var r={aggregateBy:[{dataSourceId:"derived:com.google.calories.expended:com.google.android.gms:merge_calories_expended"}],bucketByTime:{durationMillis:864e5},startTimeMillis:n,endTimeMillis:e};t.open("POST","https://fitness.googleapis.com/fitness/v1/users/me/dataset:aggregate"),t.setRequestHeader("Authorization","Bearer "+vn),t.send(JSON.stringify(r))}}(A.getTime(),u.getTime())})),r.appendChild(o),o.click();let i=document.createElement("div");i.style.cssText="height: 20px;width: 20px; position: absolute; right: 10px;top: 11px;display: none;",i.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><title>Delete</title><path fill="#FFFFFF" d="M20 6.91L17.09 4L12 9.09L6.91 4L4 6.91L9.09 12L4 17.09L6.91 20L12 14.91L17.09 20L20 17.09L14.91 12L20 6.91Z" /></svg>',o.appendChild(i),i.addEventListener("click",(n=>{n.stopPropagation();let e=o.getAttribute("data-index"),t=document.querySelector('.side-btn[data-index="'+e+'"]');pn==e&&(Cn.innerHTML=""),In.splice(e,1),t.remove(),localStorage.projectArray=JSON.stringify(In)})),o.addEventListener("mouseover",(()=>{o.children[0].style.display="block"})),o.addEventListener("mouseout",(()=>{o.children[0].style.display="none"}))})),localStorage.projectArray=JSON.stringify(In)}function En(n){document.querySelectorAll(".select-option").forEach((e=>{parseInt(e.getAttribute("data-mode"))!=n?e.classList.remove("active"):e.classList.add("active")}))}function Mn(n){pn=n,fn.classList.add("active"),gn.classList.add("active")}function Ln(){let n=0;0==bn?Array.from(document.querySelector(".task-container").children).forEach((e=>{n+=parseFloat(e.children[0].children[2].textContent.slice(10))})):1==bn?Array.from(document.querySelector(".task-container").children).forEach((e=>{n+=parseFloat(e.children[1].children[0].textContent.slice(10,e.children[1].children[0].textContent.length-2))})):2==bn?Array.from(document.querySelector(".task-container").children).forEach((e=>{n+=parseFloat(e.children[1].children[1].textContent.slice(5,e.children[1].children[1].textContent.length-2))})):3==bn?Array.from(document.querySelector(".task-container").children).forEach((e=>{n+=parseFloat(e.children[1].children[2].textContent.slice(12,e.children[1].children[2].textContent.length-2))})):4==bn?Array.from(document.querySelector(".task-container").children).forEach((e=>{n+=parseFloat(e.children[1].children[3].textContent.slice(15,e.children[1].children[3].textContent.length-2))})):5==bn&&null!=In[pn].water&&(n=In[pn].water),document.querySelector("#intakevalue").textContent="Value: "+n.toFixed(2),document.querySelector("#intakevalue").textContent+=0==bn?" cal":1==bn||2==bn||4==bn?" g":5==bn?" ml":" mg"}function Un(n){let e=document.querySelector(".task-container"),t=0;""==e.innerHTML?(e.innerHTML="",In[n].projtasks.forEach((n=>{yn(e,t,n),t++})),localStorage.projectArray=JSON.stringify(In)):yn(e,e.children.length,In[n].projtasks[e.children.length])}function Yn(n){document.querySelectorAll(".side-btn.active").forEach((e=>{e.getAttribute("data-index")!=n&&e.classList.remove("active")}))}window.addTask=function(){let n=pn,e=document.querySelector("#tname").value;document.querySelector("#tname").value="";let t=new h(e);In[n].projtasks.push(t),localStorage.projectArray=JSON.stringify(In),Un(n),gn.click()},window.initialize=Sn,window.addProject=kn,Sn(),window.updateProjects=Tn,window.insertProjectTask=Mn,window.updateProjectTasks=Un,window.highlight=Yn,document.querySelectorAll(".side-btn")[0].addEventListener("click",(()=>{hn.classList.add("active"),gn.classList.add("active")})),gn.addEventListener("click",(()=>{mn[0].classList.remove("active"),fn.classList.remove("active"),hn.classList.remove("active"),Dn.classList.remove("active"),gn.classList.remove("active"),document.querySelector("#sidebar").classList.remove("active")})),document.querySelectorAll(".water-opt").forEach((n=>{n.addEventListener("click",(()=>{n.classList.toggle("active")}))})),document.querySelectorAll(".water-quant").forEach((n=>{n.addEventListener("click",(n=>{n.stopPropagation()}))}));let qn=0,Dn=document.querySelector(".water-form");function jn(){let n=document.querySelector("#gsignin");"null"!=localStorage.acctoken&&null!=localStorage.acctoken&&(n.innerHTML="Sign Out")}window.addWater=function(){qn=In[pn].water,null==qn&&(qn=0),document.querySelectorAll(".water-opt.active .water-quant").forEach((n=>{n.parentElement.classList.remove("active"),""!=n.value&&(qn+=parseInt(n.value)*parseInt(n.parentElement.getAttribute("data-value")),n.value="")})),console.log(qn),In[pn].water=qn,localStorage.projectArray=JSON.stringify(In),Ln(),gn.click()},window.resetWater=function(){In[pn].water=null,localStorage.projectArray=JSON.stringify(In),gn.click(),Ln()},document.querySelector("#ham").addEventListener("click",(()=>{document.querySelector("#sidebar").classList.toggle("active"),gn.classList.toggle("active")})),window.googlesignin=function(){let n=document.querySelector("#gsignin");if("Sign Out"==n.innerHTML)return localStorage.acctoken=null,vn=null,n.innerHTML='<svg style="margin-right: 5px;" width="20px" height="20px" viewBox="0 -20 256 256" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" preserveAspectRatio="xMidYMid" fill="#000000"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <g> <path d="M55.5774312,0.518934349 C69.9640298,-1.34690438 84.9125622,1.8555732 97.2260067,9.53169919 C104.176529,13.6289064 109.735855,19.5592184 115.437029,25.1731016 C119.572426,29.2212078 123.664178,33.3184151 127.810486,37.35561 L127.963245,37.7756965 C124.865978,40.8249722 121.351577,46.9222616 117.420043,56.0675647 C109.17447,58.9683238 103.546988,61.8965291 100.537598,64.8521807 C93.8216694,58.3872132 87.3239678,51.6931076 80.6353179,45.1954061 C74.2740081,39.2378157 64.6611197,36.8373215 56.3303135,39.5706115 C46.8429054,42.2384336 39.603233,51.3112108 39.1013114,61.1586929 C38.7739713,66.2815659 40.1106102,71.4862739 42.8820899,75.8071636 C44.6060812,78.5895547 47.1266002,80.7118099 49.3852471,83.0359248 C54.8136375,88.4915936 60.372964,93.821782 65.7195194,99.3538301 C62.8643828,102.159652 59.4836867,107.591131 55.5774312,115.648267 C47.2683739,119.586376 41.5035506,123.167662 38.2829611,126.392125 C31.0651113,119.605273 24.1636903,112.452891 17.0113085,105.58966 C8.49500953,96.7296534 2.79929132,85.2345593 0.835250554,73.1066076 C-1.32519429,60.0948375 0.726137178,46.3956532 6.74919552,34.6495983 C11.8066005,24.8021161 19.4609038,16.2476275 28.7737304,10.2409361 C36.8699429,5.15079715 46.0409221,1.58278976 55.5774312,0.518934349 Z" fill="#EA4335"> </path> <polygon fill="#34A853" points="128.083269 160.779205 190.490665 99.2719951 207.36413 109.294059 217.921767 126.452137 128.083269 215.330437 65.7631648 153.675924 77.7221592 136.846613 93.3633932 126.430314"> </polygon> <polygon fill="#FBBC05" points="100.592154 64.9121931 116.289402 73.4031101 128.083269 92.1687143 65.7631648 153.675924 38.2829611 126.392125"> </polygon> <path d="M203.333309,0.895375496 C221.620711,3.99419537 238.440538,15.4129101 247.660618,31.5671454 C258.16278,49.314436 258.735625,72.3428139 249.417343,90.7065951 C245.55473,98.5954921 239.657152,105.251408 233.377677,111.301745 C228.167513,116.28277 223.219222,121.596592 217.921767,126.452137 C208.756244,117.417549 199.579809,108.388418 190.490665,99.2719951 C196.966543,92.7306482 203.54608,86.2984147 210.043782,79.7788905 C214.233735,75.5452915 216.857912,69.7404599 217.070683,63.7665026 C217.359833,56.9851063 214.6811,50.105508 209.765542,45.4027215 C204.757239,40.6617453 197.741248,37.9666449 190.834372,38.5394901 C184.893148,38.8231849 179.159241,41.5182853 174.969287,45.7191503 C159.33334,61.1914269 143.735583,76.707349 128.083269,92.1687143 C118.879556,83.1232155 109.664932,74.088628 100.592154,64.9121931 C100.581243,64.895826 100.553965,64.8685477 100.537598,64.8521807 C109.703121,55.8503272 118.808632,46.7884613 127.963245,37.7756965 C134.597338,31.2398053 141.209608,24.6766357 147.849157,18.1352889 C156.447291,9.49896517 167.784171,3.84143664 179.628428,1.2445383 C187.43549,-0.223036606 195.488057,-0.38670667 203.333309,0.895375496 Z" fill="#4285F4"> </path> </g> </g></svg> Link Google Fit',void document.querySelector(`.side-btn[data-index="${pn}"]`).click();google.accounts.oauth2.initTokenClient({client_id:"46732986109-fjpf0a3jnpmd7qp5o2hqcvscs8hi8emp.apps.googleusercontent.com",scope:"https://www.googleapis.com/auth/fitness.activity.read",callback:n=>{console.log(n),vn=n.access_token,localStorage.acctoken=vn,jn(),document.querySelector(`.side-btn[data-index="${pn}"]`).click()}}).requestAccessToken()},window.changeSignInState=jn,jn()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,